{"version":3,"sources":["App.js","component/Button.js","serviceWorker.js","index.js"],"names":["App","props","reset","setState","current","previous","nextIsReset","operate","symbol","indexOf","state","push","calculate","length","eval","String","buttons","cols","action","this","className","type","value","map","btn","i","key","Component","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5bc0f3c4.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport Button from './component/Button.js';\nimport './css/style.css';\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state={\n    current:'0',\n    previous:[],\n    nextIsReset:false\n  }\n  }\n  reset = ()=>{\n    this.setState({current:'0',previous:[],nextIsReset:false});\n  }\n  operate =(symbol)=>{\n    if([\"/\",\"-\",\"+\",\"*\"].indexOf(symbol)>-1){\n    let {previous}=this.state;\n    previous.push(this.state.current+symbol);\n    this.setState({previous,nextIsReset:true});\n     }\n     else\n     {\n      if((this.state.current===\"0\"&&symbol!==\".\")||this.state.nextIsReset){\n        this.setState({current:symbol,nextIsReset:false});\n      }\n      else\n      this.setState({current:this.state.current +symbol});\n  }\n}\n  calculate=(symbol)=>{\n    let{current,previous,nextIsReset}=this.state;\n    if(previous.length>0){\n      current=eval(String(previous[previous.length-1]+current));\n      this.setState({current,previous:[],nextIsReset:true});\n    }\n  }\n\n  render(){\n    const buttons=[\n      {symbol:'c',cols: 3,action:this.reset},\n      {symbol:'/',cols: 1,action:this.operate},\n      {symbol:'7',cols: 1,action:this.operate},\n      {symbol:'8',cols: 1,action:this.operate},\n      {symbol:'9',cols: 1,action:this.operate},\n      {symbol:'*',cols: 1,action:this.operate},\n      {symbol:'4',cols: 1,action:this.operate},\n      {symbol:'5',cols: 1,action:this.operate},\n      {symbol:'6',cols: 1,action:this.operate},\n      {symbol:'-',cols: 1,action:this.operate},\n      {symbol:'1',cols: 1,action:this.operate},\n      {symbol:'2',cols: 1,action:this.operate},\n      {symbol:'3',cols: 1,action:this.operate},\n      {symbol:'+',cols: 1,action:this.operate},\n      {symbol:'0',cols: 2,action:this.operate},\n      {symbol:'.',cols: 1,action:this.operate},\n      {symbol:'=',cols: 1,action:this.calculate},\n    ];\n\n  return (\n    <div className=\"App\">\n      {\n        this.state.previous.length>0?\n      <div className=\"floaty-last\">{this.state.previous[this.state.previous.length-1]}</div>\n    :null}\n        <input className=\"result\" type=\"text\" value={this.state.current}/>\n        {buttons.map((btn,i)=>{\n          return <Button key={i} symbol={btn.symbol} cols={btn.cols} action={(symbol)=>btn.action(symbol)}></Button>\n        }\n        )\n        }\n\n    </div>\n  );\n}\n}\nexport default App;\n","import React,{Component} from 'react';\r\n\r\nclass Button extends Component{\r\n    render(){\r\n        return(\r\n            <div className={`column-${this.props.cols}`}>\r\n                <button className=\"calc-button\" onClick={()=>this.props.action(this.props.symbol)}>{this.props.symbol}</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Button;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}